<?xml version="1.0" encoding="utf-8"?>
<mx:Panel dataChange="setup()" xmlns:mx="http://www.adobe.com/2006/mxml" width="400" title="Select a Lead to Convert" paddingLeft="5" paddingBottom="5">
	<mx:Script>
		<![CDATA[
			import com.salesforce.results.DescribeSObjectResult;
			import mx.utils.ObjectProxy;
			import com.salesforce.objects.LeadConvert;
			import mx.utils.ObjectUtil;
			import com.salesforce.AsyncResponder;
			import mx.collections.ArrayCollection;
			import com.salesforce.results.QueryResult;
			import com.salesforce.Connection;
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			
			private var _data:Object;
			private var leadId:String;
			private var accountId:String;
			private var contactId:String;
			private var userId:String;
			private var cStatus:String;
			private var apex:Connection;
			
			[Bindable]
			private var leadData:QueryResult;
			[Bindable]
			private var accountData:QueryResult;
			[Bindable]
			private var contactData:QueryResult;
			[Bindable]
			private var userData:QueryResult;
			[Bindable]
			private var picklistValues:ArrayCollection;
			
			public var leadConvert:LeadConvert;
			
			private function setup():void {
				_data = data;
				apex = _data.connection;
				apex.query("Select Id, MasterLabel from LeadStatus where IsConverted=true", new AsyncResponder(
					function(qr:QueryResult):void {
						picklistValues = qr.records;
						cStatus = qr.records[0].MasterLabel;
						callLater(getLeadData);
					}, function(fault:Object):void {
						Alert.show(ObjectUtil.toString(fault));
					})
				);
			}
			private function getLeadData():void {
				apex.query("Select Id, FirstName, LastName From Lead Where IsConverted = false", 
					new AsyncResponder(
						function(qr:QueryResult):void {
							for (var i:int = 0;i<qr.records.length;i++) {
								qr.records[i].labelField = qr.records[i].FirstName + " " + qr.records[i].LastName;
							}
							leadData = qr;
						}, function(fault:Object):void {
							Alert.show(ObjectUtil.toString(fault));
						})
				);
			}
			private function getAccounts(event:Event):void {
				var cb:CheckBox = event.currentTarget as CheckBox;
				if (cb.selected) {
					if (accountData == null) {
						apex.query("Select Id, Name From Account", 
							new AsyncResponder(
								function(qr:QueryResult):void {
									accountData = qr;
									if (accountData.records.length > 0) {
										accounts.selectedItem = 0;
										accountId = accountData.records[0].Id;
										updateContact.enabled = true;
										if (updateContact.selected) {
											getContacts();
										}
									}
								}, function(fault:Object):void {
									Alert.show(ObjectUtil.toString(fault));
								})
						);
					}
					accounts.enabled = true;
				} else {
					accounts.enabled = false;
					updateContact.enabled = false;
				}
			}
			private function getContacts():void {
				var cb:CheckBox = updateContact;
				if (cb.selected) {
						apex.query("Select Id, FirstName, LastName From Contact Where AccountId = '" + accountId + "'", 
							new AsyncResponder(
								function(qr:QueryResult):void {
									if (qr.size > 0) {
										for (var i:int = 0;i<qr.records.length;i++) {
											qr.records[i].labelField = qr.records[i].FirstName + " " + qr.records[i].LastName;
										}
									}
									contactData = qr;
								}, function(fault:Object):void {
									Alert.show(ObjectUtil.toString(fault));
								})
						);
					contacts.enabled = true;
				} else {
					contacts.enabled = false;
				}
			}
			private function getUsers():void {
				var cb:CheckBox = updateOwner;
				if (cb.selected) {
					if (userData == null) {
						apex.query("Select Id, FirstName, LastName From User", 
							new AsyncResponder(
								function(qr:QueryResult):void {
									if (qr.size > 0) {
										for (var i:int = 0;i<qr.records.length;i++) {
											qr.records[i].labelField = qr.records[i].FirstName + " " + qr.records[i].LastName;
										}
									}
									userData = qr;
								}, function(fault:Object):void {
									Alert.show(ObjectUtil.toString(fault));
								})
						);
					}
					users.enabled = true;
				} else {
					users.enabled = false;
				}
			}
			private function accountSelectionChanged(event:Event):void {
				accountId = accounts.selectedItem.Id;
				if (updateContact.selected) {
					getContacts();
				}
			}
			private function setOpptyProps():void {
				if (createOppty.selected) {
					txtOptyName.enabled = true;
				} else {
					txtOptyName.enabled = false;
					txtOptyName.text = "";
				}
			}
			private function closeDialog():void {
				PopUpManager.removePopUp(this);
			}
			private function doConvert():void {
				leadConvert = new LeadConvert();
				leadConvert.convertedStatus = cStatus;
				if (updateAccount.selected) {
					leadConvert.accountId = accountId;
				}
				if (updateContact.selected) {
					leadConvert.contactId = contactId;
				}
				if (createOppty.selected) {
					leadConvert.doNotCreateOpportunity = false;
					leadConvert.opportunityName = txtOptyName.text;
				}
				leadConvert.overwriteLeadSource = overwriteSource.selected;
				if (updateOwner.selected) {
					leadConvert.ownerId = userId;
				}
				leadConvert.sendNotificationEmail = sendNotification.selected;
				leadConvert.leadId = leadId;
				
				apex.convertLead([leadConvert], new AsyncResponder(
					function(result:Object):void {
						if (result is ObjectProxy) {
							result = new ArrayCollection([result]);
						}
						for (var i:int = 0;i<result.length;i++) {
							var lcResult:Object = result[i];
							if (lcResult.success == true) {
								Alert.show("The lead conversion was successful.");
							} else {
								Alert.show("The lead conversion failed.\n\n" + lcResult.errors.statusCode + "\n" + lcResult.errors.message);
							}
						}
						closeDialog();
					}, function(fault:Object):void {
						Alert.show(ObjectUtil.toString(fault));
					})
				);
			}
		]]>
	</mx:Script>
	<mx:Label x="10" y="10" text="Unconverted Leads:"/>
	<mx:ComboBox id="leads" change="leadId = leads.selectedItem.Id;" dataProvider="{leadData.records}" labelField="labelField" ></mx:ComboBox>
	<mx:HBox width="100%">
		<mx:Label text="Converted Status:"/>
		<mx:ComboBox labelField="MasterLabel" id="convertedStatus" dataProvider="{picklistValues}" change="cStatus = convertedStatus.selectedItem.MasterLabel as String;" selectedIndex="0"></mx:ComboBox>
	</mx:HBox>
	<mx:VBox width="100%" borderStyle="inset" verticalAlign="middle" backgroundColor="#dfdfdf" verticalGap="0">
		<mx:HRule width="100%" strokeColor="#111111" strokeWidth="3"/>
		<mx:Label text="Optional Settings"/>
	</mx:VBox>
	<mx:CheckBox change="getAccounts(event);" id="updateAccount" label="Account to update:" />
	<mx:ComboBox enabled="false" id="accounts" dataProvider="{accountData.records}" change="accountSelectionChanged(event)" labelField="Name"></mx:ComboBox>
	<mx:HRule width="100%"/>
	<mx:CheckBox change="getContacts();" enabled="false" id="updateContact" label="Contact to update:"/>
	<mx:ComboBox dataProvider="{contactData.records}" change="contactId = contacts.selectedItem.Id;" labelField="labelField" enabled="false" id="contacts"></mx:ComboBox>
	<mx:HRule width="100%"/>
	<mx:CheckBox id="createOppty" change="setOpptyProps()" label="Create Opportunity?"/>
	<mx:HBox width="100%">
		<mx:Label text="Opportunity Name:"/>
		<mx:TextInput enabled="false" id="txtOptyName"/>
	</mx:HBox>
	<mx:HRule width="100%"/>
	<mx:HBox width="100%">
		<mx:CheckBox id="overwriteSource" label="Overwrite lead source"/>
		<mx:CheckBox id="sendNotification" label="Send notification email"/>
	</mx:HBox>
	<mx:HRule width="100%"/>
	<mx:CheckBox change="getUsers()" id="updateOwner" label="Assign Owner"/>
	<mx:ComboBox labelField="labelField" id="users" change="userId = users.selectedItem.Id;" dataProvider="{userData.records}"></mx:ComboBox>
	<mx:ControlBar x="104" y="237" horizontalAlign="right" verticalAlign="middle">
		<mx:Button label="OK" click="doConvert()"/>
		<mx:Button label="Cancel"  click="closeDialog()"/>
	</mx:ControlBar>
	
</mx:Panel>
