#!/bin/env python

import ZSI, string, sys, getopt, urlparse
from ZSI.wstools import WSDLTools
from ZSI.wsdl2python import WriteServiceModule
from ZSI.wsdlInterface import ZSIWsdlAdapter


USAGE = """Usage: ./serverstub -f wsdlfile | -u url [-h]
  where:
    wsdl        -> wsdl file to generate callbacks from.
    -f          -> location of wsdl file in disc
    -u          -> location of wsdl via url
    -h          -> prints this message and exits.
"""

ID1 = '    '
ID2 = ID1 * 2
ID3 = ID1 * 3
ID4 = ID1 * 4


class ServerCallbackDescription:
    method_prefix = 'soap'

    def __init__(self):
        self.imports  = ''
        self.service  = ''
        self.classdef = ''
        self.initdef  = ''
        self.location = ''
        self.methods  = []
        self.actions  = []

    def fromWsdl(self, ws):

        wsm = ZSI.wsdl2python.WriteServiceModule(ws)

        self.service = wsm.get_module_names()[1]

        wsm = None

        ws = ZSIWsdlAdapter( ws )

        self.imports = self.getImports()

        for service in ws.getServicesList():
            for port in service.getPortList():
                # fetch the service location
                for e in port.getExtensions():
                    soapAddress = None
                    if isinstance(e, ZSI.wsdlInterface.ZSISoapAddressAdapter):
                        soapAddress = e
                    if soapAddress:
                        self.location = soapAddress.getLocation()
                # generate methods
                for op in port.getBinding().getPortType().getOperationList():
                    self.generateMethods(op, port)

        self.classdef = self.getClassdef(ws)
        self.initdef  = self.getInitdef()

    def getImports(self):

        i  = 'from %s import *' % self.service
        i += '\nfrom ZSI.ServiceContainer import ServiceSOAPBinding'
        #i += '\ntry:'
        #i += '\n%sfrom pyGridWare.twisted.SoapSupport import ZsiSOAPPublisher'\
        #     % ID1
        #i += '\nexcept:'
        #i += '\n%sclass ZsiSOAPPublisher:' % ID1
        #i += '\n%spass' % ID2
        return i

    def getMethodName(self, method):
        return '%s_%s' %(self.method_prefix, method)

    def getClassdef(self, ws):

        #c  = '\nclass %s(ZsiSOAPPublisher, ServiceSOAPBinding):' \
        #     % ws.getName()
        c  = '\nclass %s(ServiceSOAPBinding):' \
             % ws.getName()
        c += '\n%ssoapAction = {' % ID1

        for a in self.actions:
            c += "\n%s'%s': '%s'," % (ID2, a[0], self.getMethodName(a[1]))
        
        c += '\n%s}' % ID2

        return c

    def getInitdef(self):

        uri = urlparse.urlparse( self.location )[2]
        
        d  = "\n%sdef __init__(self, post='%s', **kw):" % (ID1, uri)
        d += '\n%sServiceSOAPBinding.__init__(self, post)' % ID2

        return d

    def generateMethods(self, op, port):

        # generate soapactions while we're here

        operation = port.getBinding().getOperationDict().get(op.getName())

        if operation.getSoapOperation():
            action = operation.getSoapOperation().getAction()
            if action:
                self.actions.append( ( action, op.getName() ) )
            
        # now take care of the method

        o  = '\n%sdef %s(self, ps):' % (ID1, self.getMethodName(op.getName()))
        o += '\n%s# input vals in request object' % ID2
        o += '\n%sargs = ps.Parse( %s() )' \
                  % ( ID2, op.getInput().getMessage().getName() \
                      + 'Wrapper' )
        o += '\n\n%s# assign return values to response object' % ID2
        o += '\n%sresponse = %s()' \
                  % ( ID2, op.getOutput().getMessage().getName() \
                      + 'Wrapper' )
        o += '\n\n%sreturn response' % ID2

        self.methods.append(o)

    def getContents(self):
        return string.join([self.imports,
                            self.classdef,
                            self.initdef,
                            string.join(self.methods, '\n')], '\n') + '\n'

    def getStubName(self):
        return '%s_server' % self.service

    def write(self, fd=sys.stdout):
        fd.write( self.getContents() )


def doCommandLine():

    args_d = { 'fromfile': False, 'fromurl': False }
    
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'f:u:h')
    except getopt.GetoptError, e:
        print >> sys.stderr, sys.argv[0] + ': ' + str(e)
        sys.exit(-1)

    if not opts:
        print USAGE
        sys.exit(-1)

    for opt, val in opts:
        if opt in [ '-h']:
            print USAGE
            sys.exit(0)
        elif opt in ['-f']:
            args_d['wsdl'] = val
            args_d['fromfile'] = True
        elif opt in ['-u']:
            args_d['wsdl'] = val
            args_d['fromurl'] = True
        else:
            print USAGE
            sys.exit(-1)
            
    return args_d


def main():

    args_d = doCommandLine()

    reader = WSDLTools.WSDLReader()

    if args_d['fromfile']:
        wsdl = reader.loadFromFile(args_d['wsdl'])
    elif args_d['fromurl']:
        wsdl = reader.loadFromURL(args_d['wsdl'])

    ss = ServerCallbackDescription()

    ss.fromWsdl(wsdl)

    fd = open( ss.getStubName() + '.py', 'w+' )

    ss.write(fd)

    fd.close()

if __name__ == '__main__':
    main()
