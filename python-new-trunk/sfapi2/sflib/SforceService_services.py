################################################## 
# SforceService_services.py 
# generated by ZSI.wsdl2python 
# 
# 
##################################################


from SforceService_services_types import *
from SforceService_services_types import \
    urn_sobject_partner_soap_sforce_com as ns1
from SforceService_services_types import \
    urn_partner_soap_sforce_com as ns2
from SforceService_services_types import \
    urn_fault_partner_soap_sforce_com as ns3
import urlparse, types
from ZSI.TCcompound import Struct
from ZSI import client
import ZSI

class SforceServiceInterface:
    def getSoap(self, portAddress=None, **kw):
        raise NonImplementationError, "method not implemented"


class SforceServiceLocator(SforceServiceInterface):
    Soap_address = "https://na1.salesforce.com/services/Soap/u/3.0"
            
    def getSoapAddress(self):
        return SforceServiceLocator.Soap_address

    def getSoap(self, portAddress=None, **kw):
        if portAddress is not None:
            self.Soap_address = portAddress
        return SoapBindingSOAP(portAddress or SforceServiceLocator.Soap_address, **kw)


class SoapBindingSOAP:

    def __init__(self, addr, **kw):
        netloc = (urlparse.urlparse(addr)[1]).split(":") + [80,]
        if not kw.has_key("host"):
            kw["host"] = netloc[0]
        if not kw.has_key("port"):
            kw["port"] = int(netloc[1])
        if not kw.has_key("url"):
            kw["url"] =  urlparse.urlparse(addr)[2]
        self.binding = client.Binding(**kw)


    def create(self, request, **kw):
        """
        @param: request to createRequest::
            _sObjects: ns1.sObject_Def
              _Id: ns1.Id_Def, optional
              _fieldsToNull: str, optional
              _type: str, optional

        @return: response from createResponse::
            _result: ns2.SaveResult_Def
              _errors: ns2.Error_Def, optional
                _fields: str, optional
                _message: str
                _statusCode: ns2.StatusCode_Def
                  _StatusCode: str, optional
              _id: ns2.ID_Def
                _ID: str, optional
              _success: boolean
        """

        if not isinstance(request, createRequest) and\
            not issubclass(createRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        #kw = {}
        response = self.binding.Send(None, None, request, soapaction="", **kw)
        response = self.binding.Receive(createResponseWrapper())
        if not isinstance(response, createResponse) and\
            not issubclass(createResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def delete(self, request, **kw):
        """
        @param: request to deleteRequest::
            _ids: ns2.ID_Def
              _ID: str, optional

        @return: response from deleteResponse::
            _result: ns2.DeleteResult_Def
              _errors: ns2.Error_Def, optional
                _fields: str, optional
                _message: str
                _statusCode: ns2.StatusCode_Def
                  _StatusCode: str, optional
              _id: ns2.ID_Def
                _ID: str, optional
              _success: boolean
        """

        if not isinstance(request, deleteRequest) and\
            not issubclass(deleteRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        #kw = {}
        response = self.binding.Send(None, None, request, soapaction="", **kw)
        response = self.binding.Receive(deleteResponseWrapper())
        if not isinstance(response, deleteResponse) and\
            not issubclass(deleteResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def describeGlobal(self, request, **kw):
        """
        @param: request to describeGlobalRequest::

        @return: response from describeGlobalResponse::
            _result: ns2.DescribeGlobalResult_Def
              _encoding: str, optional
              _maxBatchSize: int
              _types: str, optional
        """

        if not isinstance(request, describeGlobalRequest) and\
            not issubclass(describeGlobalRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        #kw = {}
        response = self.binding.Send(None, None, request, soapaction="", **kw)
        response = self.binding.Receive(describeGlobalResponseWrapper())
        if not isinstance(response, describeGlobalResponse) and\
            not issubclass(describeGlobalResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def describeSObject(self, request, **kw):
        """
        @param: request to describeSObjectRequest::
            _sObjectType: str

        @return: response from describeSObjectResponse::
            _result: ns2.DescribeSObjectResult_Def
              _activateable: boolean
              _createable: boolean
              _custom: boolean
              _deletable: boolean
              _fields: ns2.Field_Def, optional
                _byteLength: int
                _createable: boolean
                _custom: boolean
                _digits: int
                _filterable: boolean
                _label: str
                _length: int
                _name: str
                _nameField: boolean
                _nillable: boolean
                _picklistValues: ns2.PicklistEntry_Def, optional
                  _active: boolean
                  _defaultValue: boolean
                  _label: str, optional
                  _value: str
                _precision: int
                _referenceTo: str, optional
                _restrictedPicklist: boolean
                _scale: int
                _soapType: ns2.soapType_Def
                  _soapType: str, optional
                _type: ns2.fieldType_Def
                  _fieldType: str, optional
                _updateable: boolean
              _label: str
              _name: str
              _queryable: boolean
              _replicateable: boolean
              _retrieveable: boolean
              _searchable: boolean
              _undeletable: boolean
              _updateable: boolean
        """

        if not isinstance(request, describeSObjectRequest) and\
            not issubclass(describeSObjectRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        #kw = {}
        response = self.binding.Send(None, None, request, soapaction="", **kw)
        response = self.binding.Receive(describeSObjectResponseWrapper())
        if not isinstance(response, describeSObjectResponse) and\
            not issubclass(describeSObjectResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def getDeleted(self, request, **kw):
        """
        @param: request to getDeletedRequest::
            _endDate: tuple
            _sObjectType: str
            _startDate: tuple

        @return: response from getDeletedResponse::
            _result: ns2.GetDeletedResult_Def
              _deletedRecords: ns2.DeletedRecord_Def, optional
                _deletedDate: tuple
                _id: ns2.ID_Def
                  _ID: str, optional
              _sforceReserved: str, optional
        """

        if not isinstance(request, getDeletedRequest) and\
            not issubclass(getDeletedRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        #kw = {}
        response = self.binding.Send(None, None, request, soapaction="", **kw)
        response = self.binding.Receive(getDeletedResponseWrapper())
        if not isinstance(response, getDeletedResponse) and\
            not issubclass(getDeletedResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def getServerTimestamp(self, request, **kw):
        """
        @param: request to getServerTimestampRequest::

        @return: response from getServerTimestampResponse::
            _result: ns2.GetServerTimestampResult_Def
              _timestamp: tuple
        """

        if not isinstance(request, getServerTimestampRequest) and\
            not issubclass(getServerTimestampRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        #kw = {}
        response = self.binding.Send(None, None, request, soapaction="", **kw)
        response = self.binding.Receive(getServerTimestampResponseWrapper())
        if not isinstance(response, getServerTimestampResponse) and\
            not issubclass(getServerTimestampResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def getUpdated(self, request, **kw):
        """
        @param: request to getUpdatedRequest::
            _endDate: tuple
            _sObjectType: str
            _startDate: tuple

        @return: response from getUpdatedResponse::
            _result: ns2.GetUpdatedResult_Def
              _ids: ns2.ID_Def, optional
                _ID: str, optional
              _sforceReserved: str, optional
        """

        if not isinstance(request, getUpdatedRequest) and\
            not issubclass(getUpdatedRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        #kw = {}
        response = self.binding.Send(None, None, request, soapaction="", **kw)
        response = self.binding.Receive(getUpdatedResponseWrapper())
        if not isinstance(response, getUpdatedResponse) and\
            not issubclass(getUpdatedResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def getUserInfo(self, request, **kw):
        """
        @param: request to getUserInfoRequest::

        @return: response from getUserInfoResponse::
            _result: ns2.GetUserInfoResult_Def
              _currencySymbol: str
              _organizationId: ns2.ID_Def
                _ID: str, optional
              _organizationMultiCurrency: boolean
              _organizationName: str
              _userDefaultCurrencyIsoCode: str, optional
              _userEmail: str
              _userFullName: str
              _userId: ns2.ID_Def
              _userLanguage: str
              _userLocale: str
              _userTimeZone: str
        """

        if not isinstance(request, getUserInfoRequest) and\
            not issubclass(getUserInfoRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        #kw = {}
        response = self.binding.Send(None, None, request, soapaction="", **kw)
        response = self.binding.Receive(getUserInfoResponseWrapper())
        if not isinstance(response, getUserInfoResponse) and\
            not issubclass(getUserInfoResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def login(self, request, **kw):
        """
        @param: request to loginRequest::
            _password: str
            _username: str

        @return: response from loginResponse::
            _result: ns2.LoginResult_Def
              _serverUrl: str, optional
              _sessionId: str
              _userId: ns2.ID_Def
                _ID: str, optional
        """

        if not isinstance(request, loginRequest) and\
            not issubclass(loginRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        #kw = {}
        response = self.binding.Send(None, None, request, soapaction="", **kw)
        response = self.binding.Receive(loginResponseWrapper())
        if not isinstance(response, loginResponse) and\
            not issubclass(loginResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def query(self, request, **kw):
        """
        @param: request to queryRequest::
            _queryString: str

        @return: response from queryResponse::
            _result: ns2.QueryResult_Def
              _done: boolean
              _queryLocator: ns2.QueryLocator_Def, optional
                _QueryLocator: str, optional
              _records: ns1.sObject_Def, optional
                _Id: ns1.Id_Def, optional
                _fieldsToNull: str, optional
                _type: str, optional
              _size: int
        """

        if not isinstance(request, queryRequest) and\
            not issubclass(queryRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        #kw = {}
        response = self.binding.Send(None, None, request, soapaction="", **kw)
        response = self.binding.Receive(queryResponseWrapper())
        if not isinstance(response, queryResponse) and\
            not issubclass(queryResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def queryMore(self, request, **kw):
        """
        @param: request to queryMoreRequest::
            _queryLocator: ns2.QueryLocator_Def
              _QueryLocator: str, optional

        @return: response from queryMoreResponse::
            _result: ns2.QueryResult_Def
              _done: boolean
              _queryLocator: ns2.QueryLocator_Def, optional
                _QueryLocator: str, optional
              _records: ns1.sObject_Def, optional
                _Id: ns1.Id_Def, optional
                _fieldsToNull: str, optional
                _type: str, optional
              _size: int
        """

        if not isinstance(request, queryMoreRequest) and\
            not issubclass(queryMoreRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        #kw = {}
        response = self.binding.Send(None, None, request, soapaction="", **kw)
        response = self.binding.Receive(queryMoreResponseWrapper())
        if not isinstance(response, queryMoreResponse) and\
            not issubclass(queryMoreResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def resetPassword(self, request, **kw):
        """
        @param: request to resetPasswordRequest::
            _userId: ns2.ID_Def
              _ID: str, optional

        @return: response from resetPasswordResponse::
            _result: ns2.ResetPasswordResult_Def
              _password: str
        """

        if not isinstance(request, resetPasswordRequest) and\
            not issubclass(resetPasswordRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        #kw = {}
        response = self.binding.Send(None, None, request, soapaction="", **kw)
        response = self.binding.Receive(resetPasswordResponseWrapper())
        if not isinstance(response, resetPasswordResponse) and\
            not issubclass(resetPasswordResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def retrieve(self, request, **kw):
        """
        @param: request to retrieveRequest::
            _fieldList: str
            _ids: ns2.ID_Def
              _ID: str, optional
            _sObjectType: str

        @return: response from retrieveResponse::
            _result: ns1.sObject_Def, optional
              _Id: ns1.Id_Def, optional
              _fieldsToNull: str, optional
              _type: str, optional
        """

        if not isinstance(request, retrieveRequest) and\
            not issubclass(retrieveRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        #kw = {}
        response = self.binding.Send(None, None, request, soapaction="", **kw)
        response = self.binding.Receive(retrieveResponseWrapper())
        if not isinstance(response, retrieveResponse) and\
            not issubclass(retrieveResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def search(self, request, **kw):
        """
        @param: request to searchRequest::
            _searchString: str

        @return: response from searchResponse::
            _result: ns2.SearchResult_Def
              _searchRecords: ns2.SearchRecord_Def, optional
                _record: ns1.sObject_Def
                  _Id: ns1.Id_Def, optional
                  _fieldsToNull: str, optional
                  _type: str, optional
              _sforceReserved: str, optional
        """

        if not isinstance(request, searchRequest) and\
            not issubclass(searchRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        #kw = {}
        response = self.binding.Send(None, None, request, soapaction="", **kw)
        response = self.binding.Receive(searchResponseWrapper())
        if not isinstance(response, searchResponse) and\
            not issubclass(searchResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def setPassword(self, request, **kw):
        """
        @param: request to setPasswordRequest::
            _password: str
            _userId: ns2.ID_Def
              _ID: str, optional

        @return: response from setPasswordResponse::
            _result: ns2.SetPasswordResult_Def
        """

        if not isinstance(request, setPasswordRequest) and\
            not issubclass(setPasswordRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        #kw = {}
        response = self.binding.Send(None, None, request, soapaction="", **kw)
        response = self.binding.Receive(setPasswordResponseWrapper())
        if not isinstance(response, setPasswordResponse) and\
            not issubclass(setPasswordResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def update(self, request, **kw):
        """
        @param: request to updateRequest::
            _sObjects: ns1.sObject_Def
              _Id: ns1.Id_Def, optional
              _fieldsToNull: str, optional
              _type: str, optional

        @return: response from updateResponse::
            _result: ns2.SaveResult_Def
              _errors: ns2.Error_Def, optional
                _fields: str, optional
                _message: str
                _statusCode: ns2.StatusCode_Def
                  _StatusCode: str, optional
              _id: ns2.ID_Def
                _ID: str, optional
              _success: boolean
        """

        if not isinstance(request, updateRequest) and\
            not issubclass(updateRequest, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        #kw = {}
        response = self.binding.Send(None, None, request, soapaction="", **kw)
        response = self.binding.Receive(updateResponseWrapper())
        if not isinstance(response, updateResponse) and\
            not issubclass(updateResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response



class createRequest(ns2.create_Dec): 
    if not hasattr( ns2.create_Dec(), "typecode" ):
        typecode = ns2.create_Dec()

    def __init__(self, name=None, ns=None, **kw ):
        ns2.create_Dec.__init__(self, name=None, ns=None, **kw )

class createRequestWrapper(createRequest):
    """wrapper for document:literal message"""

    typecode = createRequest( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        createRequest.__init__( self, name=None, ns=None, **kw )

class createResponse(ns2.createResponse_Dec): 
    if not hasattr( ns2.createResponse_Dec(), "typecode" ):
        typecode = ns2.createResponse_Dec()

    def __init__(self, name=None, ns=None, **kw ):
        ns2.createResponse_Dec.__init__(self, name=None, ns=None, **kw )

class createResponseWrapper(createResponse):
    """wrapper for document:literal message"""

    typecode = createResponse( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        createResponse.__init__( self, name=None, ns=None, **kw )

class deleteRequest(ns2.delete_Dec): 
    if not hasattr( ns2.delete_Dec(), "typecode" ):
        typecode = ns2.delete_Dec()

    def __init__(self, name=None, ns=None, **kw ):
        ns2.delete_Dec.__init__(self, name=None, ns=None, **kw )

class deleteRequestWrapper(deleteRequest):
    """wrapper for document:literal message"""

    typecode = deleteRequest( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        deleteRequest.__init__( self, name=None, ns=None, **kw )

class deleteResponse(ns2.deleteResponse_Dec): 
    if not hasattr( ns2.deleteResponse_Dec(), "typecode" ):
        typecode = ns2.deleteResponse_Dec()

    def __init__(self, name=None, ns=None, **kw ):
        ns2.deleteResponse_Dec.__init__(self, name=None, ns=None, **kw )

class deleteResponseWrapper(deleteResponse):
    """wrapper for document:literal message"""

    typecode = deleteResponse( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        deleteResponse.__init__( self, name=None, ns=None, **kw )

class describeGlobalRequest(ns2.describeGlobal_Dec): 
    if not hasattr( ns2.describeGlobal_Dec(), "typecode" ):
        typecode = ns2.describeGlobal_Dec()

    def __init__(self, name=None, ns=None, **kw ):
        ns2.describeGlobal_Dec.__init__(self, name=None, ns=None, **kw )

class describeGlobalRequestWrapper(describeGlobalRequest):
    """wrapper for document:literal message"""

    typecode = describeGlobalRequest( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        describeGlobalRequest.__init__( self, name=None, ns=None, **kw )

class describeGlobalResponse(ns2.describeGlobalResponse_Dec): 
    if not hasattr( ns2.describeGlobalResponse_Dec(), "typecode" ):
        typecode = ns2.describeGlobalResponse_Dec()

    def __init__(self, name=None, ns=None, **kw ):
        ns2.describeGlobalResponse_Dec.__init__(self, name=None, ns=None, **kw )

class describeGlobalResponseWrapper(describeGlobalResponse):
    """wrapper for document:literal message"""

    typecode = describeGlobalResponse( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        describeGlobalResponse.__init__( self, name=None, ns=None, **kw )

class describeSObjectRequest(ns2.describeSObject_Dec): 
    if not hasattr( ns2.describeSObject_Dec(), "typecode" ):
        typecode = ns2.describeSObject_Dec()

    def __init__(self, name=None, ns=None, **kw ):
        ns2.describeSObject_Dec.__init__(self, name=None, ns=None, **kw )

class describeSObjectRequestWrapper(describeSObjectRequest):
    """wrapper for document:literal message"""

    typecode = describeSObjectRequest( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        describeSObjectRequest.__init__( self, name=None, ns=None, **kw )

class describeSObjectResponse(ns2.describeSObjectResponse_Dec): 
    if not hasattr( ns2.describeSObjectResponse_Dec(), "typecode" ):
        typecode = ns2.describeSObjectResponse_Dec()

    def __init__(self, name=None, ns=None, **kw ):
        ns2.describeSObjectResponse_Dec.__init__(self, name=None, ns=None, **kw )

class describeSObjectResponseWrapper(describeSObjectResponse):
    """wrapper for document:literal message"""

    typecode = describeSObjectResponse( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        describeSObjectResponse.__init__( self, name=None, ns=None, **kw )

class getDeletedRequest(ns2.getDeleted_Dec): 
    if not hasattr( ns2.getDeleted_Dec(), "typecode" ):
        typecode = ns2.getDeleted_Dec()

    def __init__(self, name=None, ns=None, **kw ):
        ns2.getDeleted_Dec.__init__(self, name=None, ns=None, **kw )

class getDeletedRequestWrapper(getDeletedRequest):
    """wrapper for document:literal message"""

    typecode = getDeletedRequest( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        getDeletedRequest.__init__( self, name=None, ns=None, **kw )

class getDeletedResponse(ns2.getDeletedResponse_Dec): 
    if not hasattr( ns2.getDeletedResponse_Dec(), "typecode" ):
        typecode = ns2.getDeletedResponse_Dec()

    def __init__(self, name=None, ns=None, **kw ):
        ns2.getDeletedResponse_Dec.__init__(self, name=None, ns=None, **kw )

class getDeletedResponseWrapper(getDeletedResponse):
    """wrapper for document:literal message"""

    typecode = getDeletedResponse( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        getDeletedResponse.__init__( self, name=None, ns=None, **kw )

class getServerTimestampRequest(ns2.getServerTimestamp_Dec): 
    if not hasattr( ns2.getServerTimestamp_Dec(), "typecode" ):
        typecode = ns2.getServerTimestamp_Dec()

    def __init__(self, name=None, ns=None, **kw ):
        ns2.getServerTimestamp_Dec.__init__(self, name=None, ns=None, **kw )

class getServerTimestampRequestWrapper(getServerTimestampRequest):
    """wrapper for document:literal message"""

    typecode = getServerTimestampRequest( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        getServerTimestampRequest.__init__( self, name=None, ns=None, **kw )

class getServerTimestampResponse(ns2.getServerTimestampResponse_Dec): 
    if not hasattr( ns2.getServerTimestampResponse_Dec(), "typecode" ):
        typecode = ns2.getServerTimestampResponse_Dec()

    def __init__(self, name=None, ns=None, **kw ):
        ns2.getServerTimestampResponse_Dec.__init__(self, name=None, ns=None, **kw )

class getServerTimestampResponseWrapper(getServerTimestampResponse):
    """wrapper for document:literal message"""

    typecode = getServerTimestampResponse( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        getServerTimestampResponse.__init__( self, name=None, ns=None, **kw )

class getUpdatedRequest(ns2.getUpdated_Dec): 
    if not hasattr( ns2.getUpdated_Dec(), "typecode" ):
        typecode = ns2.getUpdated_Dec()

    def __init__(self, name=None, ns=None, **kw ):
        ns2.getUpdated_Dec.__init__(self, name=None, ns=None, **kw )

class getUpdatedRequestWrapper(getUpdatedRequest):
    """wrapper for document:literal message"""

    typecode = getUpdatedRequest( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        getUpdatedRequest.__init__( self, name=None, ns=None, **kw )

class getUpdatedResponse(ns2.getUpdatedResponse_Dec): 
    if not hasattr( ns2.getUpdatedResponse_Dec(), "typecode" ):
        typecode = ns2.getUpdatedResponse_Dec()

    def __init__(self, name=None, ns=None, **kw ):
        ns2.getUpdatedResponse_Dec.__init__(self, name=None, ns=None, **kw )

class getUpdatedResponseWrapper(getUpdatedResponse):
    """wrapper for document:literal message"""

    typecode = getUpdatedResponse( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        getUpdatedResponse.__init__( self, name=None, ns=None, **kw )

class getUserInfoRequest(ns2.getUserInfo_Dec): 
    if not hasattr( ns2.getUserInfo_Dec(), "typecode" ):
        typecode = ns2.getUserInfo_Dec()

    def __init__(self, name=None, ns=None, **kw ):
        ns2.getUserInfo_Dec.__init__(self, name=None, ns=None, **kw )

class getUserInfoRequestWrapper(getUserInfoRequest):
    """wrapper for document:literal message"""

    typecode = getUserInfoRequest( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        getUserInfoRequest.__init__( self, name=None, ns=None, **kw )

class getUserInfoResponse(ns2.getUserInfoResponse_Dec): 
    if not hasattr( ns2.getUserInfoResponse_Dec(), "typecode" ):
        typecode = ns2.getUserInfoResponse_Dec()

    def __init__(self, name=None, ns=None, **kw ):
        ns2.getUserInfoResponse_Dec.__init__(self, name=None, ns=None, **kw )

class getUserInfoResponseWrapper(getUserInfoResponse):
    """wrapper for document:literal message"""

    typecode = getUserInfoResponse( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        getUserInfoResponse.__init__( self, name=None, ns=None, **kw )

class loginRequest(ns2.login_Dec): 
    if not hasattr( ns2.login_Dec(), "typecode" ):
        typecode = ns2.login_Dec()

    def __init__(self, name=None, ns=None, **kw ):
        ns2.login_Dec.__init__(self, name=None, ns=None, **kw )

class loginRequestWrapper(loginRequest):
    """wrapper for document:literal message"""

    typecode = loginRequest( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        loginRequest.__init__( self, name=None, ns=None, **kw )

class loginResponse(ns2.loginResponse_Dec): 
    if not hasattr( ns2.loginResponse_Dec(), "typecode" ):
        typecode = ns2.loginResponse_Dec()

    def __init__(self, name=None, ns=None, **kw ):
        ns2.loginResponse_Dec.__init__(self, name=None, ns=None, **kw )

class loginResponseWrapper(loginResponse):
    """wrapper for document:literal message"""

    typecode = loginResponse( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        loginResponse.__init__( self, name=None, ns=None, **kw )

class queryMoreRequest(ns2.queryMore_Dec): 
    if not hasattr( ns2.queryMore_Dec(), "typecode" ):
        typecode = ns2.queryMore_Dec()

    def __init__(self, name=None, ns=None, **kw ):
        ns2.queryMore_Dec.__init__(self, name=None, ns=None, **kw )

class queryMoreRequestWrapper(queryMoreRequest):
    """wrapper for document:literal message"""

    typecode = queryMoreRequest( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        queryMoreRequest.__init__( self, name=None, ns=None, **kw )

class queryMoreResponse(ns2.queryMoreResponse_Dec): 
    if not hasattr( ns2.queryMoreResponse_Dec(), "typecode" ):
        typecode = ns2.queryMoreResponse_Dec()

    def __init__(self, name=None, ns=None, **kw ):
        ns2.queryMoreResponse_Dec.__init__(self, name=None, ns=None, **kw )

class queryMoreResponseWrapper(queryMoreResponse):
    """wrapper for document:literal message"""

    typecode = queryMoreResponse( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        queryMoreResponse.__init__( self, name=None, ns=None, **kw )

class queryRequest(ns2.query_Dec): 
    if not hasattr( ns2.query_Dec(), "typecode" ):
        typecode = ns2.query_Dec()

    def __init__(self, name=None, ns=None, **kw ):
        ns2.query_Dec.__init__(self, name=None, ns=None, **kw )

class queryRequestWrapper(queryRequest):
    """wrapper for document:literal message"""

    typecode = queryRequest( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        queryRequest.__init__( self, name=None, ns=None, **kw )

class queryResponse(ns2.queryResponse_Dec): 
    if not hasattr( ns2.queryResponse_Dec(), "typecode" ):
        typecode = ns2.queryResponse_Dec()

    def __init__(self, name=None, ns=None, **kw ):
        ns2.queryResponse_Dec.__init__(self, name=None, ns=None, **kw )

class queryResponseWrapper(queryResponse):
    """wrapper for document:literal message"""

    typecode = queryResponse( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        queryResponse.__init__( self, name=None, ns=None, **kw )

class resetPasswordRequest(ns2.resetPassword_Dec): 
    if not hasattr( ns2.resetPassword_Dec(), "typecode" ):
        typecode = ns2.resetPassword_Dec()

    def __init__(self, name=None, ns=None, **kw ):
        ns2.resetPassword_Dec.__init__(self, name=None, ns=None, **kw )

class resetPasswordRequestWrapper(resetPasswordRequest):
    """wrapper for document:literal message"""

    typecode = resetPasswordRequest( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        resetPasswordRequest.__init__( self, name=None, ns=None, **kw )

class resetPasswordResponse(ns2.resetPasswordResponse_Dec): 
    if not hasattr( ns2.resetPasswordResponse_Dec(), "typecode" ):
        typecode = ns2.resetPasswordResponse_Dec()

    def __init__(self, name=None, ns=None, **kw ):
        ns2.resetPasswordResponse_Dec.__init__(self, name=None, ns=None, **kw )

class resetPasswordResponseWrapper(resetPasswordResponse):
    """wrapper for document:literal message"""

    typecode = resetPasswordResponse( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        resetPasswordResponse.__init__( self, name=None, ns=None, **kw )

class retrieveRequest(ns2.retrieve_Dec): 
    if not hasattr( ns2.retrieve_Dec(), "typecode" ):
        typecode = ns2.retrieve_Dec()

    def __init__(self, name=None, ns=None, **kw ):
        ns2.retrieve_Dec.__init__(self, name=None, ns=None, **kw )

class retrieveRequestWrapper(retrieveRequest):
    """wrapper for document:literal message"""

    typecode = retrieveRequest( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        retrieveRequest.__init__( self, name=None, ns=None, **kw )

class retrieveResponse(ns2.retrieveResponse_Dec): 
    if not hasattr( ns2.retrieveResponse_Dec(), "typecode" ):
        typecode = ns2.retrieveResponse_Dec()

    def __init__(self, name=None, ns=None, **kw ):
        ns2.retrieveResponse_Dec.__init__(self, name=None, ns=None, **kw )

class retrieveResponseWrapper(retrieveResponse):
    """wrapper for document:literal message"""

    typecode = retrieveResponse( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        retrieveResponse.__init__( self, name=None, ns=None, **kw )

class searchRequest(ns2.search_Dec): 
    if not hasattr( ns2.search_Dec(), "typecode" ):
        typecode = ns2.search_Dec()

    def __init__(self, name=None, ns=None, **kw ):
        ns2.search_Dec.__init__(self, name=None, ns=None, **kw )

class searchRequestWrapper(searchRequest):
    """wrapper for document:literal message"""

    typecode = searchRequest( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        searchRequest.__init__( self, name=None, ns=None, **kw )

class searchResponse(ns2.searchResponse_Dec): 
    if not hasattr( ns2.searchResponse_Dec(), "typecode" ):
        typecode = ns2.searchResponse_Dec()

    def __init__(self, name=None, ns=None, **kw ):
        ns2.searchResponse_Dec.__init__(self, name=None, ns=None, **kw )

class searchResponseWrapper(searchResponse):
    """wrapper for document:literal message"""

    typecode = searchResponse( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        searchResponse.__init__( self, name=None, ns=None, **kw )

class setPasswordRequest(ns2.setPassword_Dec): 
    if not hasattr( ns2.setPassword_Dec(), "typecode" ):
        typecode = ns2.setPassword_Dec()

    def __init__(self, name=None, ns=None, **kw ):
        ns2.setPassword_Dec.__init__(self, name=None, ns=None, **kw )

class setPasswordRequestWrapper(setPasswordRequest):
    """wrapper for document:literal message"""

    typecode = setPasswordRequest( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        setPasswordRequest.__init__( self, name=None, ns=None, **kw )

class setPasswordResponse(ns2.setPasswordResponse_Dec): 
    if not hasattr( ns2.setPasswordResponse_Dec(), "typecode" ):
        typecode = ns2.setPasswordResponse_Dec()

    def __init__(self, name=None, ns=None, **kw ):
        ns2.setPasswordResponse_Dec.__init__(self, name=None, ns=None, **kw )

class setPasswordResponseWrapper(setPasswordResponse):
    """wrapper for document:literal message"""

    typecode = setPasswordResponse( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        setPasswordResponse.__init__( self, name=None, ns=None, **kw )

class updateRequest(ns2.update_Dec): 
    if not hasattr( ns2.update_Dec(), "typecode" ):
        typecode = ns2.update_Dec()

    def __init__(self, name=None, ns=None, **kw ):
        ns2.update_Dec.__init__(self, name=None, ns=None, **kw )

class updateRequestWrapper(updateRequest):
    """wrapper for document:literal message"""

    typecode = updateRequest( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        updateRequest.__init__( self, name=None, ns=None, **kw )

class updateResponse(ns2.updateResponse_Dec): 
    if not hasattr( ns2.updateResponse_Dec(), "typecode" ):
        typecode = ns2.updateResponse_Dec()

    def __init__(self, name=None, ns=None, **kw ):
        ns2.updateResponse_Dec.__init__(self, name=None, ns=None, **kw )

class updateResponseWrapper(updateResponse):
    """wrapper for document:literal message"""

    typecode = updateResponse( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        updateResponse.__init__( self, name=None, ns=None, **kw )
